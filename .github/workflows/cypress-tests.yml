name: Cypress E2E Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 6 * * *'

jobs:
  smoke-tests:
    runs-on: ubuntu-latest
    
    # Adicionar serviços necessários
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        browser: [chrome]  # Começar só com Chrome para debug

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Instalar dependências do frontend
        run: npm ci

      - name: Instalar dependências do backend
        run: cd backend && npm ci

      - name: Criar arquivo de ambiente do Cypress
        run: |
          cat > cypress.env.json << 'EOF'
          {
            "ADMIN_EMAIL": "admin@test.com",
            "ADMIN_PASSWORD": "admin123",
            "USER_EMAIL": "user@test.com",
            "USER_PASSWORD": "user123",
            "INVALID_EMAIL": "invalid@test.com",
            "NONEXISTENT_EMAIL": "nonexistent@test.com"
          }
          EOF

      - name: Criar arquivo .env do backend
        run: |
          cat > backend/.env << 'EOF'
          NODE_ENV=test
          PORT=3001
          DATABASE_URL=postgresql://testuser:testpass@localhost:5432/testdb
          JWT_SECRET=test-secret-key-for-ci
          JWT_EXPIRES_IN=1h
          EOF

      - name: Executar migrations do banco
        run: |
          cd backend
          npm run migrate || npm run db:migrate || echo "Nenhum comando de migration encontrado"

      - name: Seed do banco (se necessário)
        run: |
          cd backend
          npm run seed || echo "Nenhum comando de seed encontrado"

      - name: Iniciar backend em background
        run: |
          cd backend
          npm start &
          echo $! > backend.pid
        env:
          NODE_ENV: test

      - name: Aguardar backend estar pronto
        run: |
          npx wait-on http://localhost:3001 --timeout 60000

      - name: Executar Smoke Tests
        uses: cypress-io/github-action@v6
        with:
          browser: ${{ matrix.browser }}
          spec: 'cypress/e2e/Smoke/**/*'
          record: false
          install: false  # Já instalamos antes
          wait-on: 'http://localhost:3001'
          wait-on-timeout: 30

      - name: Parar backend
        if: always()
        run: |
          if [ -f backend.pid ]; then
            kill $(cat backend.pid) || true
          fi

      - name: Upload screenshots (falhas)
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots-smoke-${{ matrix.browser }}
          path: cypress/screenshots
          retention-days: 7

      - name: Upload videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos-smoke-${{ matrix.browser }}
          path: cypress/videos
          retention-days: 7

  e2e-tests:
    runs-on: ubuntu-latest
    needs: smoke-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      fail-fast: false
      matrix:
        browser: [chrome]  # Adicionar firefox e edge depois
        spec:
          - 'cypress/e2e/Login/**/*'
          - 'cypress/e2e/API/**/*'

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Instalar dependências
        run: |
          npm ci
          cd backend && npm ci

      - name: Criar arquivo de ambiente do Cypress
        run: |
          cat > cypress.env.json << 'EOF'
          {
            "ADMIN_EMAIL": "admin@test.com",
            "ADMIN_PASSWORD": "admin123",
            "USER_EMAIL": "user@test.com",
            "USER_PASSWORD": "user123",
            "INVALID_EMAIL": "invalid@test.com",
            "NONEXISTENT_EMAIL": "nonexistent@test.com"
          }
          EOF

      - name: Criar arquivo .env do backend
        run: |
          cat > backend/.env << 'EOF'
          NODE_ENV=test
          PORT=3001
          DATABASE_URL=postgresql://testuser:testpass@localhost:5432/testdb
          JWT_SECRET=test-secret-key-for-ci
          JWT_EXPIRES_IN=1h
          EOF

      - name: Executar migrations do banco
        run: |
          cd backend
          npm run migrate || npm run db:migrate || true

      - name: Seed do banco
        run: |
          cd backend
          npm run seed || true

      - name: Iniciar backend em background
        run: |
          cd backend
          npm start &
          echo $! > ../backend.pid
        env:
          NODE_ENV: test

      - name: Aguardar backend estar pronto
        run: npx wait-on http://localhost:3001 --timeout 60000

      - name: Executar testes E2E
        uses: cypress-io/github-action@v6
        with:
          browser: ${{ matrix.browser }}
          spec: ${{ matrix.spec }}
          record: false
          install: false
          wait-on: 'http://localhost:3001'
          wait-on-timeout: 30

      - name: Parar backend
        if: always()
        run: |
          if [ -f backend.pid ]; then
            kill $(cat backend.pid) || true
          fi

      - name: Upload screenshots (falhas)
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots-${{ matrix.browser }}-${{ strategy.job-index }}
          path: cypress/screenshots
          retention-days: 30

      - name: Upload videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos-${{ matrix.browser }}-${{ strategy.job-index }}
          path: cypress/videos
          retention-days: 30

  docker-tests:
    runs-on: ubuntu-latest
    needs: smoke-tests

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Criar arquivo de ambiente
        run: |
          cat > cypress.env.json << 'EOF'
          {
            "ADMIN_EMAIL": "admin@test.com",
            "ADMIN_PASSWORD": "admin123",
            "USER_EMAIL": "user@test.com",
            "USER_PASSWORD": "user123",
            "INVALID_EMAIL": "invalid@test.com",
            "NONEXISTENT_EMAIL": "nonexistent@test.com"
          }
          EOF

      - name: Build e executar testes com Docker
        run: |
          docker-compose up --build -d
          docker-compose run --rm cypress
          EXIT_CODE=$?
          docker-compose down
          exit $EXIT_CODE

      - name: Copiar resultados do container (se falhar)
        if: always()
        run: |
          mkdir -p cypress/videos cypress/screenshots cypress/reports
          docker-compose run --rm --no-deps --entrypoint "" cypress sh -c "
            cp -r /e2e/cypress/videos/* /e2e/cypress/videos/ 2>/dev/null || true
            cp -r /e2e/cypress/screenshots/* /e2e/cypress/screenshots/ 2>/dev/null || true
            cp -r /e2e/cypress/reports/* /e2e/cypress/reports/ 2>/dev/null || true
          " || true

      - name: Upload Docker test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docker-test-results
          path: |
            cypress/videos
            cypress/screenshots
            cypress/reports
          retention-days: 30

  generate-reports:
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: always()

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Download todos os artefatos
        uses: actions/download-artifact@v4

      - name: Instalar dependências para relatórios
        run: npm install -g mochawesome-merge mochawesome-report-generator

      - name: Gerar relatório consolidado
        run: |
          mkdir -p consolidated-reports
          find . -name "*.json" -path "*/cypress/reports/*" -exec cp {} consolidated-reports/ \; 2>/dev/null || true
          
          if [ -n "$(ls -A consolidated-reports/*.json 2>/dev/null)" ]; then
            mochawesome-merge consolidated-reports/*.json > consolidated-reports/merged-report.json
            marge consolidated-reports/merged-report.json --reportDir consolidated-reports --inline
          else
            echo "⚠️ Nenhum relatório JSON encontrado"
          fi

      - name: Upload relatório consolidado
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: consolidated-test-report
          path: consolidated-reports
          retention-days: 90

  deploy:
    runs-on: ubuntu-latest
    needs: [smoke-tests, e2e-tests]
    if: github.ref == 'refs/heads/main' && success()

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Deploy para staging
        run: |
          echo "🚀 Deploy seria executado aqui"
          echo "✅ Todos os testes passaram - ambiente está pronto para deploy"
